%implements s2_b0_yq1jf_Functions "C"

%function rt_roundd_snf_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
if (fabs(u) < 4.503599627370496E+15) {
    if (u >= 0.5) {
        y = floor(u + 0.5);
    } else if (u > -0.5) {
        y = u * 0.0;
    } else {
        y = ceil(u - 0.5);
    }
} else {
    y = u;
}
return y;
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_roundd_snf(\
%assign comma = ""
%<comma>real_T u\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%openfile localVarsBuf
real_T y;
%closefile localVarsBuf
%return localVarsBuf + fcnBuff
%endfunction

%function rt_remd_snf_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign _modelSS = ""

if (u1 < 0.0) {
    u = ceil(u1);
} else {
    u = floor(u1);
}
if ((u1 != 0.0) && (u1 != u) && ((!rtIsNaN(u0)) && (!rtIsInf(u0)) && ((!rtIsNaN(u1)) && (!rtIsInf(u1))))) {
    u = u0 / u1;
%if SLibCG_FcnCallArgAccessed(0,1,0,0)
%<SLibCG_AccessLocal(0 ,1, 0)>
%endif

    if (fabs(u - %<(SLibCGCallSubFcn("rt_roundd_snf", ["u"], 0, 1, 0))>) <= DBL_EPSILON * fabs(u)) {
        y = 0.0;
    } else {
        y = fmod(u0, u1);
    }
} else {
    y = fmod(u0, u1);
}
return y;
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_remd_snf(\
%assign comma = ""
%<comma>real_T u0\
%assign comma = ", "
%<comma>real_T u1\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 1, fcnProtoType)>
%openfile localVarsBuf
real_T y;
real_T u;
%closefile localVarsBuf
%return localVarsBuf + fcnBuff
%endfunction

%function rt_atan2d_snf_Fcn2(block) void
%assign fcnBuff = ""
%openfile fcnBuff
if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else if (rtIsInf(u0) && rtIsInf(u1)) {
    if (u0 > 0.0) {
        u = 1;
    } else {
        u = -1;
    }
    if (u1 > 0.0) {
        u_0 = 1;
    } else {
        u_0 = -1;
    }
    y = atan2((real_T)u, (real_T)u_0);
} else if (u1 == 0.0) {
    if (u0 > 0.0) {
        y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
        y = -(RT_PI / 2.0);
    } else {
        y = 0.0;
    }
} else {
    y = atan2(u0, u1);
}
return y;
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_atan2d_snf(\
%assign comma = ""
%<comma>real_T u0\
%assign comma = ", "
%<comma>real_T u1\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%openfile localVarsBuf
real_T y;
int16_T u;
int16_T u_0;
%closefile localVarsBuf
%return localVarsBuf + fcnBuff
%endfunction

